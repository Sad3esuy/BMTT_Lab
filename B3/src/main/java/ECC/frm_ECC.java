/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ECC;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.*;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import java.security.Security;
/**
 *
 * @author nguye
 */
public class frm_ECC extends javax.swing.JFrame {
    private ECCCipher ecc;
    private PublicKey publicKey;
    private PrivateKey privateKey;

    public frm_ECC() {
        initComponents();
        ecc = new ECCCipher();
        Security.addProvider(new BouncyCastleProvider());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtBanRo = new javax.swing.JTextArea();
        txtPubKey = new javax.swing.JTextField();
        txtPriKey = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtBanMa = new javax.swing.JTextArea();
        btnTaoKey = new javax.swing.JButton();
        btnLoadkey = new javax.swing.JButton();
        btnMaHoa = new javax.swing.JButton();
        btnGiaiMa = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Elliptic Curve Cryptography Demo");

        txtBanRo.setColumns(20);
        txtBanRo.setRows(5);
        jScrollPane1.setViewportView(txtBanRo);

        txtBanMa.setColumns(20);
        txtBanMa.setRows(5);
        jScrollPane2.setViewportView(txtBanMa);

        btnTaoKey.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTaoKey.setText("Tạo Key");
        btnTaoKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoKeyActionPerformed(evt);
            }
        });

        btnLoadkey.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLoadkey.setText("Load Key");
        btnLoadkey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadkeyActionPerformed(evt);
            }
        });

        btnMaHoa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnMaHoa.setText("Mã Hoá");
        btnMaHoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaHoaActionPerformed(evt);
            }
        });

        btnGiaiMa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGiaiMa.setText("Giải Mã");
        btnGiaiMa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGiaiMaActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Bản rõ:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Public Key:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Private Key:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Bản mã:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel3)
                                .addGap(5, 5, 5))
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTaoKey)
                        .addGap(49, 49, 49)
                        .addComponent(btnLoadkey)
                        .addGap(67, 67, 67)
                        .addComponent(btnMaHoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(btnGiaiMa))
                    .addComponent(jScrollPane1)
                    .addComponent(txtPubKey)
                    .addComponent(txtPriKey)
                    .addComponent(jScrollPane2))
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(115, 115, 115))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPubKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPriKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTaoKey)
                    .addComponent(btnLoadkey)
                    .addComponent(btnMaHoa)
                    .addComponent(btnGiaiMa))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTaoKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoKeyActionPerformed
        try {
            // Tạo cặp khóa ECC
            KeyPair keyPair = ecc.generateKeyPair();
            publicKey = keyPair.getPublic();
            privateKey = keyPair.getPrivate();

            // Hiển thị khóa công khai và khóa riêng dưới dạng Base64
            txtPubKey.setText(Base64.getEncoder().encodeToString(publicKey.getEncoded()));
            txtPriKey.setText(Base64.getEncoder().encodeToString(privateKey.getEncoded()));

            // Lưu khóa công khai vào file
            JFileChooser publicKeyChooser = new JFileChooser();
            publicKeyChooser.setDialogTitle("Save Public Key File");
            int publicKeyChooserResult = publicKeyChooser.showSaveDialog(this);
            if (publicKeyChooserResult == JFileChooser.APPROVE_OPTION) {
                File publicKeyFile = publicKeyChooser.getSelectedFile();
                try (FileWriter writer = new FileWriter(publicKeyFile)) {
                    writer.write(Base64.getEncoder().encodeToString(publicKey.getEncoded()));
                    JOptionPane.showMessageDialog(this,
                            "Public Key saved to file successfully.",
                            "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this,
                            "Error saving Public Key file: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            // Lưu khóa riêng vào file
            JFileChooser privateKeyChooser = new JFileChooser();
            privateKeyChooser.setDialogTitle("Save Private Key File");
            int privateKeyChooserResult = privateKeyChooser.showSaveDialog(this);
            if (privateKeyChooserResult == JFileChooser.APPROVE_OPTION) {
                File privateKeyFile = privateKeyChooser.getSelectedFile();
                try (FileWriter writer = new FileWriter(privateKeyFile)) {
                    writer.write(Base64.getEncoder().encodeToString(privateKey.getEncoded()));
                    JOptionPane.showMessageDialog(this,
                            "Private Key saved to file successfully.",
                            "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this,
                            "Error saving Private Key file: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Error generating ECC key pair: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnTaoKeyActionPerformed

    private void btnLoadkeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadkeyActionPerformed
        try {
            // Load public key from file
            JFileChooser publicKeyChooser = new JFileChooser();
            publicKeyChooser.setDialogTitle("Load Public Key File");
            int publicKeyChooserResult = publicKeyChooser.showOpenDialog(this);
            if (publicKeyChooserResult == JFileChooser.APPROVE_OPTION) {
                File publicKeyFile = publicKeyChooser.getSelectedFile();
                byte[] publicKeyBytes = Base64.getDecoder().decode(
                        new String(java.nio.file.Files.readAllBytes(publicKeyFile.toPath())));
                publicKey = ECCCipher.loadPublicKey(publicKeyBytes);
                txtPubKey.setText(Base64.getEncoder().encodeToString(publicKey.getEncoded()));
                txtBanMa.setText("");
            }

            // Load private key from file
            JFileChooser privateKeyChooser = new JFileChooser();
            privateKeyChooser.setDialogTitle("Load Private Key File");
            int privateKeyChooserResult = privateKeyChooser.showOpenDialog(this);
            if (privateKeyChooserResult == JFileChooser.APPROVE_OPTION) {
                File privateKeyFile = privateKeyChooser.getSelectedFile();
                byte[] privateKeyBytes = Base64.getDecoder().decode(
                        new String(java.nio.file.Files.readAllBytes(privateKeyFile.toPath())));
                privateKey = ECCCipher.loadPrivateKey(privateKeyBytes);
                txtPriKey.setText(Base64.getEncoder().encodeToString(privateKey.getEncoded()));
                txtBanRo.setText("");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Error loading keys: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoadkeyActionPerformed

    private void btnMaHoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaHoaActionPerformed
        if (publicKey == null) {
            JOptionPane.showMessageDialog(this,
                    "Public key is not loaded.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            String plaintext = txtBanRo.getText(); // Lấy văn bản cần mã hóa từ textbox
            byte[] ciphertext = ecc.encrypt(plaintext, publicKey); // Mã hóa văn bản
            txtBanMa.setText(Base64.getEncoder().encodeToString(ciphertext)); // Hiển thị ciphertext dưới dạng Base64
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error encrypting: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnMaHoaActionPerformed

    private void btnGiaiMaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGiaiMaActionPerformed
        if (privateKey == null) {
            JOptionPane.showMessageDialog(this,
                    "Private key is not loaded.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            byte[] ciphertext = Base64.getDecoder().decode(txtBanMa.getText()); // Giải mã ciphertext từ Base64
            String decryptedText = ecc.decrypt(ciphertext, privateKey); // Giải mã ciphertext
            txtBanRo.setText(decryptedText); // Hiển thị văn bản đã giải mã
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error decrypting: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGiaiMaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_ECC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_ECC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_ECC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_ECC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_ECC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGiaiMa;
    private javax.swing.JButton btnLoadkey;
    private javax.swing.JButton btnMaHoa;
    private javax.swing.JButton btnTaoKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtBanMa;
    private javax.swing.JTextArea txtBanRo;
    private javax.swing.JTextField txtPriKey;
    private javax.swing.JTextField txtPubKey;
    // End of variables declaration//GEN-END:variables
}
